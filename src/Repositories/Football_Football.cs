// ------------------------------------------------------------------------
// ========================================================================
// THIS CODE AND INFORMATION ARE GENERATED BY AUTOMATIC CODE GENERATOR
// ========================================================================
// Template:   DataSource.tt
using System;
using System.CodeDom.Compiler;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Runtime.CompilerServices;
using Entities=WPAppStudio.Entities;
using RepositoriesBase=WPAppStudio.Repositories.Base;
using WPAppStudio.Shared;

namespace WPAppStudio.Repositories
{
    /// <summary>
    /// Football_Football data source.
    /// </summary>
    [CompilerGenerated]
    [GeneratedCode("Radarc", "4.0")]
    public class Football_Football : IFootball_Football 
    {
		private const int MaxResults = 10;
        private readonly ObservableCollection<Entities.FootballSchema> _data = new ObservableCollection<Entities.FootballSchema>
		{
          new Entities.FootballSchema
            {
                Id= new Guid("18fab6a1-a53d-4c61-9cdc-6d28b693bf67"),
                Title=@"Buriram FC",
                Subtitle=@"https://www.facebook.com/pages/Buriram-PEA...FC.../16559938012828...‎",
                Image=@"\Images\Item-196e7496-add0-45f1-9543-22146ce5d3df.jpg",
                Description=@"เป็นทีมอันหนึ่งของไทย",
			},
          new Entities.FootballSchema
            {
                Id= new Guid("3fa527ca-7475-46a3-8457-8d24710146b3"),
                Title=@"Suphanburi",
                Subtitle=@"www.suphanburi.go.th",
                Image=@"\Images\Item-a615720f-d08f-40b8-b99c-ba76530f00c4.jpg",
                Description=@"เป็นทีมอันดับสีของไทย",
			},
		};
	
		
        /// <summary>
        /// Retrieves the data from a static data source, in an observable collection of FootballSchema items.
        /// </summary>
        /// <returns>An observable collection of FootballSchema items.</returns>
        public ObservableCollection<Entities.FootballSchema> GetData(int numPage)
        {								
			return new ObservableCollection<Entities.FootballSchema>(_data.Skip(MaxResults * numPage).Take(MaxResults));
        }
		
		/// <summary>
        /// Retrieves the data from a static data source, filtered by a filter specification, in an observable collection of FootballSchema items.
        /// </summary>
		/// <param name="filter">Filter operation specification</param>
        /// <returns>An observable collection of FootballSchema items.</returns>
        public ObservableCollection<Entities.FootballSchema> Search(FilterSpecification filter)
        {
            return RepositoriesBase.Filter<Entities.FootballSchema>.FilterCollection(filter, _data);
        }
		
		/// <summary>
        /// Checks if data source has a element before the passed as parameter
        /// </summary>
		/// <param name="current">Current element</param>
        /// <returns>True, if there is a previous element, false if there is not</returns>
		public bool HasPrevious(Entities.FootballSchema current)
        {
            if (current == null || !_data.Any()) return false;

            return _data.IndexOf(current) > 0;
        }
		
		/// <summary>
        /// Checks if data source has a element after the passed as parameter
        /// </summary>
		/// <param name="current">Current element</param>
        /// <returns>True, if there is a next element, false if there is not</returns>
		public bool HasNext(Entities.FootballSchema current)
        {
            if (current == null || !_data.Any()) return false;

            return _data.IndexOf(current) < _data.Count - 1;
        }
		
		/// <summary>
        /// Retrieves the previous element from source.
        /// </summary>
		/// <param name="current">Current element</param>
        /// <returns>The previous element from items, if it exists. Otherwise, returns null</returns>
        public Entities.FootballSchema Previous(Entities.FootballSchema current)
        {
            if (current == null || !_data.Any()) return null;

            if (_data.First().Equals(current)) return null;

            return _data[_data.IndexOf(current) - 1];
        }
		
		/// <summary>
        /// Retrieves the next element from source.
        /// </summary>
		/// <param name="current">Current element</param>
        /// <returns>The next element from items, if it exists. Otherwise, returns null</returns>
        public Entities.FootballSchema Next(Entities.FootballSchema current)
        {
            if (current == null || !_data.Any()) return null;

            if (_data.Last().Equals(current)) return null;

            return _data[_data.IndexOf(current) + 1];
        }
	}
}

